#include <SPI.h>
#include <ADXL362.h>

#define NUM_LABELS 2
#define HIDDEN_LAYER_SIZE 6
#define INPUT_LAYER_SIZE 42

ADXL362 xl;

//Matrix Multiplication Routine
// C = A*B
void Multiply(const float* A, const float* B, int m, int p, int n, float* C)
{
  // A = input matrix (m x p)
  // B = input matrix (p x n)
  // m = number of rows in A
  // p = number of columns in A = number of rows in B
  // n = number of columns in B
  // C = output matrix = A*B (m x n)
  int i, j, k;
  for (i = 0; i < m; i++)
    for(j = 0; j < n; j++)
    {
      C[n * i + j] = 0;
      for (k = 0; k < p; k++)
        C[n * i + j] = C[n * i + j] + A[p * i + k] * B[n * k + j];
    }
}

int16_t XValue, YValue, ZValue, Temperature;
int16_t lastXValue = 0;
int16_t lastYValue = 0;
int16_t lastZValue = 0;
const float E_VALUE = 2.71828;
byte inputChar = 0;
float p[NUM_LABELS];
float h1[HIDDEN_LAYER_SIZE + 1];
float adxBuffer[INPUT_LAYER_SIZE + 1];
const float EPSILON = 0.9;
const float Theta1_T[] = {
  0.09176170359850892,0.02680488232891813,-0.0342785793181002,-0.005470121509712609,0.0913294772390524,0.07493116308774815,
  0.009153900353961407,-0.002492753487746079,0.002681030665523762,0.001561942334364277,0.005733794293523968,-0.01274168713763772,
  0.02973348860641073,0.01772894364708038,-0.02229706726770021,0.03000451715406261,-0.04069725689013582,-0.123292781047248,
  0.015497773059201,-8.166643169555681e-05,0.001148353145126556,0.001339964957095961,-0.0002147140879498917,0.0079637153733218,
  0.01655473882836415,-0.000688179878814381,-0.001770368040799254,0.002684332020591615,0.0020660343250783,-0.003530781602414058,
  0.02604768859189184,0.01104202044264161,-0.01682306683512894,0.02654049869086858,-0.02445614674390929,-0.09866314059843062,
  0.02266179333065823,0.0008274876300664839,-0.0008741186748060712,0.003251051362721109,-0.005883152441300225,0.01261052245690098,
  0.01350955265308431,-0.004017772394465989,-0.003034732251154542,-0.001926501630944812,0.004374115543116301,0.003444736611344736,
  0.02286361684392654,0.002922898624304712,-0.01317211046150031,0.02488782904597097,-0.01099045214062026,-0.07453773213284354,
  0.02346858628109697,0.0009629069916321699,-0.002308837774862219,-0.001388349675389145,-0.003239280636613303,0.01932731455775126,
  0.01289002603273934,-0.00176323710577747,0.0006845556608251775,-0.0012267786865621,0.008076447076213383,0.01638629991602105,
  0.0143619996522318,0.01116134343383694,-0.01300717570577125,0.02380630969368983,-0.0163128579746926,-0.07583382414837218,
  0.01930308421944276,-0.00283352635336918,0.001061154190284239,0.0003479532705602682,-1.095088148444709e-06,0.02833910034612951,
  0.008597746111422158,-0.002107322799548918,0.001609737515989342,0.0007730517450594591,0.007745767950464779,0.01421426842724317,
  0.009896244562183774,0.0085505722140688,-0.01214611798033196,0.01770143652243494,-0.01173768183431493,-0.05023941299168611,
  0.02015814475120823,0.0002748295075603086,0.001823892077008163,0.002475075045351726,0.0008217078907847529,0.02682750878006087,
  0.007466477676085917,-0.001297829287595682,0.0009807624624696377,0.001747639228581856,0.006503336142280776,0.008239760751967817,
  0.005873903059039147,0.006815295473482328,-0.008956523816558471,0.009962110330117558,-0.01317144209636084,-0.0440258237041201,
  0.01903781715110668,-0.000394008079730054,0.001495331711183851,0.001142806880047621,-0.000953371201025211,0.0188017223629674,
  0.008750316713212723,-0.001108292189300577,0.00210185373131245,0.0003224314756119093,0.0008435122053154178,0.002465781294619977,
  0.004390378794984033,0.003384216604941332,-0.00347898542476708,0.004514808534793551,-0.001602579788869923,-0.01670631601902677,
  0.01887956494372576,-0.002072047328958461,-0.002095541824542723,0.003571369401027094,-0.002279005705534366,0.01826090630385857,
  0.005840021212078549,0.001390710947858256,-7.177594901799906e-06,-0.000240748839182788,0.001214597632868764,0.0003994046192890418,
  0.0004562747552461524,-0.0004642249812869962,0.0009625821434827192,-0.001226777708415854,0.006371639780803012,0.005130832428090647,
  0.0180356160936197,-0.00129263762769765,-0.000938232238340442,0.0009266753404606295,-0.005245378702784783,0.01419316841347855,
  0.004554641221582711,0.0008224076184263201,0.0002880808846567153,0.0003232585182403202,-0.0003782961984948783,-0.0011696792607333,
  -3.093250573773559e-05,-0.0009234834704799582,0.0003970464953617683,-0.0001453509962933397,-0.001004754118013909,-0.001856921746190396,
  0.01914665800876281,0.0009506791758167492,-0.001979888775946434,0.003563630034662423,-0.002618301405308844,0.01607988278830322,
  0.003679100827525178,0.002000756062328795,-0.0005644428558790019,0.002368725554569037,0.001354287112960385,-0.00382851022525284,
  0.00142536899086319,0.00063883232438024,-0.001111854156290999,0.001257800515248261,-0.0002741680435940683,-0.006845658650603644,
  0.02043978567624409,0.001036943920667953,0.0008178595072274859,0.0009500290934850842,-0.001906572158919083,0.01416727695623052,
  0.007112774929438272,0.003491390100903618,0.0005958730262559315,0.003428932893031997,-0.00440074443026239,-0.01006391293548222,
  0.001377112537336609,-0.003932312000473608,0.001347053241999199,-0.0004293136215158156,0.007205420992704256,-0.001517911585626495,
  0.02077851696130556,0.002219582844579139,0.0004207504529528478,0.001772031100674116,-0.006475312134351801,0.007561839373733122,
  0.005349760068776245,0.002709325844567732,-0.0005133291766945235,0.000961275545812466,-0.004746811670913709,-0.005604792677359369,
  0.004735565841727719,-0.009040057476608073,0.003935911175226352,-0.003097125099388095,0.01571600717853575,0.01416971910582258,
  0.0204005649078051,0.002179047697770644,0.0001056134327856718,0.003317991263550158,-0.006048799781083976,0.008460615697659202,
  0.006077581731220106,0.001961074097748789,-0.001206497888562959,0.001314424541005138,-0.0022740659524539,0.004884649348719656,
  0.003730346746712928,-0.01124974202278693,0.006768667516063261,-0.001858920106333807,0.0219590269688479,0.02711875412547752,
  0.02118012963113352,-0.001972562799443958,-0.002388473264164295,0.003695583460677909,-0.004688904278404873,0.018309716046898,
  0.005197255846058848,0.0008969323885170208,0.0008588620697261425,0.002797041681061977,-0.00161762996779055,0.00443237861930132,
  0.005792585472981525,-0.01048900717311165,0.00434534332776645,-0.003640963018657948,0.02008268779788175,0.0336404117390724,
  0.01964240771450945,-0.0005269373358120429,-0.001021389451524232,0.002455788455199111,-0.00213433293085652,0.01955506513861087
};
const float Theta2_T[] = {
  -0.3145673868592382,0.3008085341910253,
  0.0287897543131122,-0.02842545265935304,
  -2.882368610091281,2.89424537619645,
  2.448338846455039,-2.453374001612231,
  -0.2063013991399408,0.2190394514992024,
  0.5512139099291038,-0.5421277548528256,
  0.5806637925764181,-0.5712597919707196
};

void setup(){
  adxBuffer[0] = 1;
  Serial.begin(9600);
  xl.begin(10);                   // Setup SPI protocol, issue device soft reset
  xl.beginMeasure();              // Switch ADXL362 to measure mode
}

void shiftBuffer(float* adxBuffer) {
  for (int x = 1; x < INPUT_LAYER_SIZE + 1; x += 3) {
    adxBuffer[x] = adxBuffer[x+3];
  }
}

int predict(float* adxBuffer) {
  Multiply(adxBuffer, Theta1_T, 1, INPUT_LAYER_SIZE + 1, HIDDEN_LAYER_SIZE, &h1[1]);
  for (int i = 1; i < HIDDEN_LAYER_SIZE + 1; i++) {
    h1[i] = sigmoid(h1[i]);
//     Serial.print('h');
//     Serial.println(h1[i]);
  }
  h1[0] = 1;
  Multiply(h1, Theta2_T, 1, HIDDEN_LAYER_SIZE + 1, NUM_LABELS, p);
  for (int i = 0; i < NUM_LABELS; i++) {
    p[i] = sigmoid(p[i]);
  }
  return 1;
}

float sigmoid(float z) {
 return 1.0 / (1.0 + pow(E_VALUE, -z));
}

void loop(){
//  if (Serial.available() > 0) {
//    // read the incoming byte:
//    inputChar = Serial.read();
//  } else {
//    inputChar = 0;
//  }
//  Serial.print(sigmoid(adxBuffer[0]));
  shiftBuffer(adxBuffer);
  xl.readXYZTData(XValue, YValue, ZValue, Temperature);

  adxBuffer[INPUT_LAYER_SIZE - 2] = XValue - lastXValue;
  adxBuffer[INPUT_LAYER_SIZE - 1] = YValue - lastYValue;
  adxBuffer[INPUT_LAYER_SIZE] = ZValue - lastZValue;
  
  lastXValue = XValue;
  lastYValue = YValue;
  lastZValue = ZValue;
  
  Serial.print(adxBuffer[INPUT_LAYER_SIZE - 2]);
  Serial.print(',');
  Serial.print(adxBuffer[INPUT_LAYER_SIZE - 1]);
  Serial.print(',');
  Serial.println(adxBuffer[INPUT_LAYER_SIZE]);

  predict(adxBuffer);

//  if (p[0] > EPSILON) {
//    Serial.println('L');
//  }
//
//  if (p[1] > EPSILON) {
//    Serial.println('R');
//  }
  
  delay(500);                // Arbitrary delay to make serial monitor easier to observe
}
